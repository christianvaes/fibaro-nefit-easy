{"name":"Nefit","type":"virtual_device","properties":{"deviceIcon":303,"currentIcon":"303","log":"","logTemp":"","mainLoop":"-- find the number of this virtual device\nlocal thisdevice = fibaro:getSelfId()\n-- use the virtual device number to find the IP address and\n-- port specified on the device's configuration page\nlocal ip = fibaro:getValue(thisdevice, 'IPAddress')\nlocal port = fibaro:getValue(thisdevice, 'TCPPort')\n\nif (nefit == nil) then\n  nefit = Net.FHttp(ip, tonumber(port))\nend\nresponse, status, errorcode = nefit:GET(\"/bridge/ecus/rrc/uiStatus\")\nresponsePressure, statusPressure, errorcodePressure = nefit:GET(\"/bridge/system/appliance/systemPressure\")\nlocal data\n\nif(nefit == nil or errorcode > 0) then\n  fibaro:call(thisdevice, \"setProperty\", \"ui.apiStatus.value\", \"Not connected\");\nelse\n  fibaro:call(thisdevice, \"setProperty\", \"ui.apiStatus.value\", \"Connected\");  \n  \n  data = json.decode(response)\n  pressureData = json.decode(responsePressure)\n\n  fibaro:call(thisdevice, \"setProperty\", \"ui.temperature.value\", data.value.IHT .. \" C\");\n  fibaro:call(thisdevice, \"setProperty\", \"ui.tempSet.value\", data.value.TSP .. \" C\");\n  fibaro:call(thisdevice, \"setProperty\", \"ui.pressure.value\", tonumber(pressureData.value) .. \" Bar\")\n  fibaro:call(thisdevice, \"setProperty\", \"ui.mode.value\", data.value.UMD);\n  fibaro:call(thisdevice, \"setProperty\", \"ui.updateTime.value\", os.date (\"%c\"))\nend\n\n--sleep for 60 seconds before we update again\nfibaro:sleep(30*1000)","ui.apiStatus.value":"Connected","ui.mode.value":"clock","ui.pressure.value":"1.8 Bar","ui.tempSet.value":"19.0 C","ui.temperature.value":"20.20 C","ui.updateTime.value":"Thu Jan  7 00:23:30 2016","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Actuele temp","name":"temperature","favourite":false,"main":true}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Ingestelde temp","name":"tempSet","favourite":false,"main":false}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"Stand","name":"mode","favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"CV Druk","name":"pressure","favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"^","name":"higher","empty":false,"msg":"-- find the number of this virtual device\nlocal thisdevice = fibaro:getSelfId()\n-- use the virtual device number to find the IP address and\n-- port specified on the device's configuration page\nlocal ip = fibaro:getValue(thisdevice, 'IPAddress')\nlocal port = fibaro:getValue(thisdevice, 'TCPPort')\n\nif (nefit == nil) then\n  nefit = Net.FHttp(ip, tonumber(port))\nend\nresponse, status, errorcode = nefit:GET(\"/bridge/ecus/rrc/uiStatus\")\nlocal data\nif(nefit ~= nil or errorcode == 0) then\n  data = json.decode(response)\n  if(data ~= nil) then\n    newTemp = tonumber(data.value.TSP) + 1\n\tjsonTable = { value = tonumber(newTemp) }\n    jsonString = json.encode(jsonTable)\n    \n    response, status, errorcode = nefit:POST(\"/bridge/heatingCircuits/hc1/temperatureRoomManual\",jsonString)\n    end\n\nend\n","buttonIcon":303,"favourite":false,"main":true},{"id":6,"lua":true,"waitForResponse":false,"caption":"auto","name":"auto","empty":false,"msg":"String te verzenden","buttonIcon":303,"favourite":false,"main":false},{"id":7,"lua":true,"waitForResponse":false,"caption":"Ë…","name":"lower","empty":false,"msg":"-- find the number of this virtual device\nlocal thisdevice = fibaro:getSelfId()\n-- use the virtual device number to find the IP address and\n-- port specified on the device's configuration page\nlocal ip = fibaro:getValue(thisdevice, 'IPAddress')\nlocal port = fibaro:getValue(thisdevice, 'TCPPort')\n\nif (nefit == nil) then\n  nefit = Net.FHttp(ip, tonumber(port))\nend\nresponse, status, errorcode = nefit:GET(\"/bridge/ecus/rrc/uiStatus\")\nlocal data\nif(nefit ~= nil or errorcode == 0) then\n  data = json.decode(response)\n  if(data ~= nil) then\n    newTemp = tonumber(data.value.TSP) + 1\n\tjsonTable = { value = tonumber(newTemp) }\n    jsonString = json.encode(jsonTable)\n    \n    response, status, errorcode = nefit:POST(\"/bridge/heatingCircuits/hc1/temperatureRoomManual\",jsonString)\n    end\n\nend\n","buttonIcon":303,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"ApiStatus","name":"apiStatus","favourite":false,"main":false}]},{"type":"label","elements":[{"id":9,"lua":false,"waitForResponse":false,"caption":"Laatst geupdate","name":"updateTime","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}